#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

config_dir="$HOME/.config/wal"
theme_dir="$config_dir/themes"
template_colors="$config_dir/.Xresources.tmpl"

cache_dir="$HOME/.cache/theme"
cached_root_color="$cache_dir/root-color"
cached_colors="$cache_dir/.Xresources"

# tmux
template_tmux="$HOME/.tmux.conf.tmpl"
tmux_config="$HOME/.tmux.conf"

# dunst
dunst_dir="$HOME/.config/dunst"
template_dunst="$dunst_dir/dunstrc.tmpl"
dunst_config="$dunst_dir/dunstrc"

# betterlockscreen
lock_dir="$HOME/.config"
template_lock="$lock_dir/betterlockscreenrc.tmpl"
lock_config="$lock_dir/betterlockscreenrc"

help() {
    cat <<EOF
Usage: $0 [OPTIONS]
    -h  show this message

    -r  restore the last theme that was in use

    -i [THEME]
        which theme to use

    The THEME argument is a string, for example: doom-wilmersdorf
EOF
}

error() {
    # log to stderr and exit with failure
    printf '%s\n' "$0: $1" >&2
    exit 1
}

exit_abnormal() {
    # same as 'error' but with help
    local msg
    msg="${1:-}"
    [[ -n "$msg" ]] && printf '%s\n' "$0: $msg" >&2
    help
    exit 1
}

apply_colors() {
    read -r root_color <"$cached_root_color"
    hsetroot -solid "$root_color"
    xrdb "$cached_colors"
}

install_theme() {
    local theme
    theme="$theme_dir/$1"
    [[ ! -e "$theme" ]] && error "theme doesn't exist"

    mkdir -p "$cache_dir"
    cp "$template_colors" "$cached_colors"
    [[ -e "$template_tmux" ]] && cp "$template_tmux" "$tmux_config"
    [[ -e "$template_dunst" ]] && cp "$template_dunst" "$dunst_config"
    [[ -e "$template_lock" ]] && cp "$template_lock" "$lock_config"

    local counter
    counter=0
    while read -r line; do
        sed -i "s/{color$counter}/$line/g" "$cached_colors"

        [[ -e "$tmux_config" ]] &&
            sed -i "s/{color$counter}/$line/g" "$tmux_config"
        [[ -e "$dunst_config" ]] &&
            sed -i "s/{color$counter}/$line/g" "$dunst_config"
        [[ -e "$lock_config" ]] &&
            sed -i "s/{color$counter}/${line:1}/g" "$lock_config"

        [[ "$counter" -eq 0 ]] && echo "$line" >"$cached_root_color"
        ((++counter))
    done <"$theme"

    apply_colors
}

restore_theme() {
    [[ ! -e "$cached_colors" ]] || [[ ! -e "$cached_root_color" ]] &&
        error "can't find generated colors"
    apply_colors
}

while getopts 'hri:' flag; do
    case "$flag" in
    h) help && exit 0 ;;
    r) restore_theme ;;
    i) install_theme "$OPTARG" ;;
    *) exit_abnormal ;;
    esac
done
