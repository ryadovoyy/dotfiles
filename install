#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

DOTFILES="$HOME/.dotfiles"
stow_packages=dunst,gtk,lock,mpv,nvim,picom,ranger,wal,emacs,scripts,shell,tmux,x
stow_packages_formatted="${stow_packages//,/$'\n'}"

declare -A stow_files
stow_files=(
    [dunst]="$HOME/.config/dunst"
    [gtk]="$HOME/.config/gtk-3.0"
    [lock]="$HOME/.config/betterlockscreenrc.tmpl"
    [mpv]="$HOME/.config/mpv"
    [nvim]="$HOME/.config/nvim"
    [picom]="$HOME/.config/picom"
    [ranger]="$HOME/.config/ranger"
    [wal]="$HOME/.config/wal"
    [emacs]="$HOME/.emacs.d"
    [scripts]="$HOME/scripts"
    [tmux]="$HOME/.tmux.conf.tmpl"
    [x]="$HOME/.xprofile"
)

stow_shell_files=(
    "$HOME/.bash_aliases"
    "$HOME/.bash_profile"
    "$HOME/.bashrc"
)

help() {
cat <<EOF
Usage: $0 [OPTIONS]
    -h  show this message

    -p [PACKAGES]
        set Stow packages for installation

    The PACKAGES argument is a comma-separated string, for example: nvim,emacs
    Default value (all available packages):
        $stow_packages
EOF
}

error() {
    # log to stderr and exit with failure
    printf '%s\n' "$0: $1" >&2
    exit 1
}

exit_abnormal() {
    # same as 'error' but with help
    local msg
    msg="${1:-}"
    [[ -n "$msg" ]] && printf '%s\n' "$0: $msg" >&2
    help
    exit 1
}

check_stow_packages() {
    local input_pkgs
    local available_pkgs
    local input_pkg_number
    local counter

    input_pkgs="${1//,/$'\n'}"
    available_pkgs="$stow_packages_formatted"
    input_pkg_number="$(echo "$input_pkgs" | wc -w)"
    counter=0

    for input_pkg in $input_pkgs; do
        for available_pkg in $available_pkgs; do
            [[ "$input_pkg" == "$available_pkg" ]] \
                && (( ++counter ))
        done
    done

    [[ "$input_pkg_number" != "$counter" ]] \
        && exit_abnormal 'please enter packages from the available list'

    stow_packages="$1"
    stow_packages_formatted="$input_pkgs"
}

while getopts 'hp:' flag; do
    case "$flag" in
        h) help && exit 0 ;;
        p) check_stow_packages "$OPTARG" ;;
        *) exit_abnormal ;;
    esac
done

cd "$DOTFILES" || error "can't cd into the dotfiles folder"

# make all scripts executable
chmod -R u+x scripts

echo "Stow packages to be installed: $stow_packages"
printf '%s\n\n' 'Installing Stow packages...'

for pkg in $stow_packages_formatted; do
    if [[ "$pkg" == shell ]]; then
        for shell_file in "${stow_shell_files[@]}"; do
            [[ -e "$shell_file" ]] && rm -fv "$shell_file"
        done
    else
        [[ -e "${stow_files[$pkg]}" ]] && rm -rfv "${stow_files[$pkg]}"
    fi
    stow -v "$pkg"
done

if [[ "$stow_packages" =~ wal ]]; then
    printf '\n%s\n' 'Installing a theme...'
    theme -i doom-tokyo-night
fi

printf '\n%s\n' 'Installation completed'
