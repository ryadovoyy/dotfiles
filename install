#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

DOTFILES="$HOME/.dotfiles"
stow_packages='btop,gtk,mpv,nvim,picom,ranger,wal,emacs,scipts,shell,tmux,x'
stow_packages_formatted="${stow_packages//,/$'\n'}"

stow_dirs=(
    "$HOME/.config/btop"
    "$HOME/.config/gtk-3.0"
    "$HOME/.config/mpv"
    "$HOME/.config/nvim"
    "$HOME/.config/picom"
    "$HOME/.config/ranger"
    "$HOME/.config/wal"
    "$HOME/.emacs.d"
    "$HOME/scripts"
)

stow_files=(
    "$HOME/.bash_aliases"
    "$HOME/.bash_profile"
    "$HOME/.bashrc"
    "$HOME/.tmux.conf"
    "$HOME/.xprofile"
)

help() {
cat <<EOF
Usage: $0 [OPTIONS]
    -h  show this message

    -p [PACKAGES]
        set stow packages for installation

    The PACKAGES argument is a comma-separated string, for example: nvim,emacs
    Default value (all available packages):
        btop,gtk,mpv,nvim,picom,ranger,wal,emacs,scipts,shell,tmux,x
EOF
}

error() {
    # log to stderr and exit with failure
    printf '%s\n' "$0: $1" >&2
    exit 1
}

exit_abnormal() {
    # same as 'error' but with help
    msg="${1:-}"
    [[ -n "$msg" ]] && printf '%s\n' "$0: $msg" >&2
    help
    exit 1
}

check_packages() {
    input_pkgs="${1//,/$'\n'}"
    available_pkgs="$stow_packages_formatted"
    input_pkg_number="$(echo "$input_pkgs" | wc -w)"
    counter=0

    for input_pkg in $input_pkgs; do
        for available_pkg in $available_pkgs; do
            [[ "$input_pkg" == "$available_pkg" ]] \
                && (( ++counter ))
        done
    done

    [[ "$input_pkg_number" != "$counter" ]] \
        && exit_abnormal 'please enter packages from the available list'
    stow_packages_formatted="$input_pkgs"
}

while getopts 'hp:' flag; do
    case "$flag" in
        h) help && exit 0 ;;
        p) check_packages "$OPTARG" ;;
        *) exit_abnormal ;;
    esac
done

cd "$DOTFILES" || error "can't cd into the dotfiles folder"

echo "Packages to be installed: ${stow_packages_formatted//$'\n'/,}"
echo "Installing packages..."

for pkg in $stow_packages_formatted; do
    case "$pkg" in
        shell|tmux|x)
            ;;
        *)
            ;;
    esac
done
